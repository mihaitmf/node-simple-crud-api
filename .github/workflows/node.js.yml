# This workflow will do a clean install of node dependencies, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: Node.js CI

on:
  push:
    paths-ignore:
      - '**/*.md'
  pull_request:
    branches: [ master ]
    paths-ignore:
      - '**/*.md'

defaults:
  run:
    shell: bash

env:
  PROJECT_PATH_EXPRESS_SERVER: express-server
  PROJECT_PATH_HTTP_SERVER: http-server
  PROJECT_PATH_PROMISES: promises

jobs:
  express-server-docker:
    name: Express-Server run in docker container
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ env.PROJECT_PATH_EXPRESS_SERVER }}
    steps:
    - uses: actions/checkout@v2
    - name: Cache docker build
      id: docker-cache
      uses: actions/cache@v2
      with:
        path: ${{ env.PROJECT_PATH_EXPRESS_SERVER }}/docker-image.tar
        key: ${{ runner.os }}-node-express-server-${{ hashFiles('**/express-server/**') }}
        restore-keys: |
          ${{ runner.os }}-node-express-server-
    - name: Express-Server load docker image from cache
      if: steps.docker-cache.outputs.cache-hit == 'true'
      run: docker load --input docker-image.tar
    - name: Express-Server build docker image
      if: steps.docker-cache.outputs.cache-hit != 'true'
      run: |
        infra/build.sh
        docker save --output docker-image.tar mihaitmf/node-express-service:latest
        pwd
        ls -lah ../
        ls -lah .
    - name: Express-Server run in docker container
      run: infra/run.sh
    - name: Express-Server test curl
      run: |
        docker ps

#        attempt_counter=0
#        max_attempts=5
#        until $(curl --output /dev/null --silent --head --fail http://localhost:8080); do
#            if [ ${attempt_counter} -eq ${max_attempts} ];then
#              echo "Max attempts reached"
#              exit 1
#            fi
#            printf '.'
#            attempt_counter=$(($attempt_counter+1))
#            sleep 5
#        done

        printf "\n--------- TEST GET ---------\n"
        curl -v "http://localhost:8080/?hello=world&aaa=123"
        printf "\n--------- TEST POST ---------\n"
        curl -d "name=john&age=29" -X POST -v localhost:8080
    - name: Clean up docker
      run: |
        docker rm -fv node-express-service
        docker rmi mihaitmf/node-express-service:latest

#  express-server-npm:
#    name: Express-Server run locally with npm
#    runs-on: ubuntu-latest
#    defaults:
#      run:
#        working-directory: ${{ env.PROJECT_PATH_EXPRESS_SERVER }}
#    strategy:
#      matrix:
#        node-version: [ 14.x, 10.x ]
#    steps:
#    - uses: actions/checkout@v2
#    - name: Use Node.js ${{ matrix.node-version }}
#      uses: actions/setup-node@v1
#      with:
#        node-version: ${{ matrix.node-version }}
#    - name: Cache npm node_modules
#      id: npm-cache
#      uses: actions/cache@v2
#      with:
#        path: ${{ env.PROJECT_PATH_EXPRESS_SERVER }}/node_modules
#        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
#        restore-keys: |
#          ${{ runner.os }}-node-
#    - name: Express-Server install
#      if: steps.npm-cache.outputs.cache-hit != 'true'
#      run: npm ci
#    - name: Express-Server run with npm
#      run: |
#        echo $PWD
#        ls -lah .
#        npm run start &
#        printf SERVER_PID=$! >> $GITHUB_ENV
#    - name: Express-Server test curl
#      run: |
#        printf "\n--------- TEST GET ---------\n"
#        curl -v "localhost:8080?hello=world&aaa=123"
#        printf "\n--------- TEST POST ---------\n"
#        curl -d "name=john&age=29" -X POST -v localhost:8080
#    - name: Clean up
#      run: |
#        printf "server PID to kill: $SERVER_PID"
#        kill $SERVER_PID
#        rm -r node_modules
#
#  http-server-node-from-system:
#    name: Http-Server with Node from system
#    runs-on: ubuntu-latest
#    defaults:
#      run:
#        working-directory: ${{ env.PROJECT_PATH_HTTP_SERVER }}
#    strategy:
#      matrix:
#        node-version: [ 14.x, 10.x ]
#    steps:
#    - uses: actions/checkout@v2
#    - name: Use Node.js ${{ matrix.node-version }}
#      uses: actions/setup-node@v1
#      with:
#        node-version: ${{ matrix.node-version }}
#    - name: Http-Server run with Node from system
#      run: node http-server.js 3000
#    - name: Http-Server test curl
#      run: |
#        curl -v "localhost:3000?hello=world&aaa=123"
#        curl -d "name=john&age=29" -X POST -v localhost:3000
#
#  http-server-node-from-docker:
#    name: Http-Server with Node from docker
#    runs-on: ubuntu-latest
#    defaults:
#      run:
#        working-directory: ${{ env.PROJECT_PATH_HTTP_SERVER }}
#    steps:
#    - uses: actions/checkout@v2
#    - name: Http-Server run with Node from docker
#      run: ../infra/docker/run-node.sh http-server.js http-server 3000
#    - name: Http-Server test curl
#      run: |
#        curl -v "localhost:3000?hello=world&aaa=123"
#        curl -d "name=john&age=29" -X POST -v localhost:3000
#
#  http-server-nodemon-from-docker:
#    name: Http-Server with Nodemon from docker
#    runs-on: ubuntu-latest
#    defaults:
#      run:
#        working-directory: ${{ env.PROJECT_PATH_HTTP_SERVER }}
#    steps:
#    - uses: actions/checkout@v2
#    - name: Http-Server run with Nodemon from docker
#      run: ../infra/docker/run-nodemon.sh http-server.js http-server 3000
#    - name: Http-Server test curl
#      run: |
#        curl -v "localhost:3000?hello=world&aaa=123"
#        curl -d "name=john&age=29" -X POST -v localhost:3000
#
#  promises:
#    name: Promises
#    runs-on: ubuntu-latest
#    defaults:
#      run:
#        working-directory: ${{ env.PROJECT_PATH_PROMISES }}
#    strategy:
#      matrix:
#        node-version: [ 14.x, 10.x ]
#    steps:
#    - uses: actions/checkout@v2
#    - name: Use Node.js ${{ matrix.node-version }}
#      uses: actions/setup-node@v1
#      with:
#        node-version: ${{ matrix.node-version }}
#    - name: Cache npm node_modules
#      id: npm-cache
#      uses: actions/cache@v2
#      with:
#        path: node_modules
#        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
#        restore-keys: |
#          ${{ runner.os }}-node-
#    - name: Promises install
#      if: steps.npm-cache.outputs.cache-hit != 'true'
#      run: npm ci
#    - name: Promises run with npm
#      run: |
#        npm run start
#        npm run github-user-details
#    - name: Clean up node_modules
#      run: rm -r node_modules
